#gateway cfg
global
        #log /dev/log    local0
        #log /dev/log    local1 notice
        #log 127.0.0.1    local0 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        maxconn 50000
        # process number
        #nbproc {{ if (le .NBProc 1) }} 1 {{ else }} {{ .NBProc }} {{ end }}

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

        errorfile 400 /usr/share/haproxy/400.http
        errorfile 403 /usr/share/haproxy/403.http
        errorfile 408 /usr/share/haproxy/408.http
        errorfile 500 /usr/share/haproxy/500.http
        errorfile 502 /usr/share/haproxy/502.http
        errorfile 503 /usr/share/haproxy/503.http
        errorfile 504 /usr/share/haproxy/504.http

# dataman stats port
listen stats :5091
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth dataman:dataman

{{ $weights := .Weights }}
{{ range $feIdx, $frontend := .Frontends }}
    {{ if eq $frontend.Protocol "http" }}
#http endpoint
listen {{ $frontend.Name }} :{{ $frontend.Bind }}
        mode http
        balance roundrobin
        cookie DM_LB_ID insert indirect nocache
        option httpclose
        option forwardfor
                        {{ range $svrIdx, $server := $frontend.Servers }}
        server {{ $server.Name }} {{ $server.Host }}:{{ $server.Port }}  check inter 3000 cookie {{ $server.Name }} weight {{index $weights $server.Name }}
                        {{ end }}
    {{ else if eq $frontend.Protocol "tcp"}}
#tcp endpoint
listen {{ $frontend.Name }} :{{ $frontend.Bind }}
        mode tcp
        option tcplog
        balance leastconn
                        {{ range $svrIdx, $server := $frontend.Servers }}
        server {{ $server.Name }} {{ $server.Host }}:{{ $server.Port }}   weight {{index $weights $server.Name }}
                        {{ end }}
    {{ else }}
#bad protocol
    {{ end }}
{{ end }}

